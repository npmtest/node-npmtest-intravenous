{"/home/travis/build/npmtest/node-npmtest-intravenous/test.js":"/* istanbul instrument in package npmtest_intravenous */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-intravenous/lib.npmtest_intravenous.js":"/* istanbul instrument in package npmtest_intravenous */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_intravenous = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_intravenous = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-intravenous/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-intravenous && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_intravenous */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_intravenous\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_intravenous.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_intravenous.rollup.js'] =\n            local.assetsDict['/assets.npmtest_intravenous.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_intravenous.__dirname + '/lib.npmtest_intravenous.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-intravenous/node_modules/intravenous/lib/intravenous.js":"// Intravenous JavaScript library v0.1.4-beta\n// (c) Roy Jacobs\n// License: MIT (http://www.opensource.org/licenses/mit-license.php)\n\n(function(window,undefined){\nvar DEBUG=true;\n!function(factory) {\n    // Support three module loading scenarios\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n        // [1] CommonJS/Node.js\n        var target = module['exports'] || exports; // module.exports is for Node.js\n        factory(target);\n    } else if (typeof define === 'function' && define['amd']) {\n        // [2] AMD anonymous module\n        define(['exports'], factory);\n    } else {\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\n        factory(window['intravenous'] = {});\n    }\n}(function(intravenous){\nintravenous = typeof intravenous !== 'undefined' ? intravenous : {};// Google Closure Compiler helpers (used only to make the minified file smaller)\nvar exportSymbol = function(path, object) {\n\tvar tokens = path.split(\".\");\n\tvar target = intravenous;\n\n\tfor (var i = 0; i < tokens.length - 1; i++)\n\t\ttarget = target[tokens[i]];\n\ttarget[tokens[tokens.length - 1]] = object;\n};\nvar exportProperty = function(owner, publicName, object) {\n  owner[publicName] = object;\n};\nintravenous.version = \"0.1.4-beta\";\nexportSymbol('version', intravenous.version);\n(function() {\n\t\"use strict\";\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar registration = function(key, container, value, lifecycle) {\n\t\tthis.key = key;\n\t\tthis.container = container;\n\t\tthis.value = value;\n\t\tthis.lifecycle = lifecycle;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar cacheItem = function(reg, instance) {\n\t\tthis.registration = reg;\n\t\tthis.instance = instance;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar perRequestLifecycle = function(container) {\n\t\tthis.container = container;\n\t\tthis.cache = [];\n\t\tthis.refCounts = {};\n\n\t\tthis.tag = 0;\n\t\tthis.visitedKeys = {};\n\t\tthis.visitedKeysArray = [];\n\t};\n\n\tperRequestLifecycle.prototype = {\n\t\tget: function(key) {\n\t\t\t// Gets an instance for 'key' that has already been retrieved during the current resolve. The current resolve is identified by 'tag'.\n\t\t\t// If there is no available instance, it will also do a check to determine if there's a circular reference during.\n\t\t\tfor (var t=0,len = this.cache.length;t<len;t++) {\n\t\t\t\tvar i = this.cache[t];\n\t\t\t\tif (i.registration.key === key && i.tag === this.tag) {\n\t\t\t\t\tif (!i.instance) break;\n\t\t\t\t\tthis.set(i);\n\t\t\t\t\treturn i.instance;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.visitedKeysArray.push(key);\n\t\t\tif (this.visitedKeys[key]) {\n\t\t\t\tthrow new Error(\"Circular reference: \" + this.visitedKeysArray.join(\" --> \"));\n\t\t\t}\n\t\t\tthis.visitedKeys[key] = true;\n\n\t\t\treturn null;\n\t\t},\n\n\t\tset: function(cacheItem) {\n\t\t\tthis.cache.push(cacheItem);\n\t\t\tcacheItem.tag = this.tag;\n\n\t\t\tthis.refCounts[cacheItem.tag] = this.refCounts[cacheItem.tag] || {};\n\t\t\tthis.refCounts[cacheItem.tag][cacheItem.registration.key] = this.refCounts[cacheItem.tag][cacheItem.registration.key]++ || 1;\n\t\t},\n\n\t\trelease: function(cacheItem) {\n\t\t\treturn !--this.refCounts[cacheItem.tag][cacheItem.registration.key];\n\t\t},\n\n\t\tresolveStarted: function(key) {\n\t\t\tthis.tag++;\n\t\t\tthis.visitedKeys = {};\n\t\t\tthis.visitedKeysArray = [];\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar singletonLifecycle = function(container, parentLifecycle) {\n\t\tthis.container = container;\n\t\tthis.cache = [];\n\t\tthis.refCounts = {};\n\t\tthis.parent = parentLifecycle;\n\t};\n\n\tsingletonLifecycle.prototype = {\n\t\tget: function(key) {\n\t\t\t// Re-use any instance that is already available for this dependency\n\t\t\tfor (var t=0,len = this.cache.length;t<len;t++) {\n\t\t\t\tvar i = this.cache[t];\n\t\t\t\tif (i.registration.key === key) {\n\t\t\t\t\tif (!i.instance) break;\n\t\t\t\t\tthis.set(i);\n\t\t\t\t\treturn i.instance;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// If the singleton wasn't found, maybe it is available in the parent\n\t\t\tif (this.parent) return this.parent.get(key);\n\t\t\telse return null;\n\t\t},\n\n\t\tset: function(cacheItem) {\n\t\t\tthis.cache.push(cacheItem);\n\t\t\tthis.refCounts[cacheItem.registration.key] = this.refCounts[cacheItem.registration.key]++ || 1;\n\t\t},\n\n\t\trelease: function(cacheItem) {\n\t\t\treturn !--this.refCounts[cacheItem.registration.key];\n\t\t},\n\n\t\tresolveStarted: function(key) {\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar uniqueLifecycle = function(container) {\n\t\tthis.container = container;\n\t\tthis.cache = [];\n\t};\n\n\tuniqueLifecycle.prototype = {\n\t\tget: function(key) {\n\t\t\treturn null;\n\t\t},\n\n\t\tset: function(cacheItem) {\n\t\t\tthis.cache.push(cacheItem);\n\t\t},\n\n\t\trelease: function(cacheItem) {\n\t\t\treturn true;\n\t\t},\n\n\t\tresolveStarted: function(key) {\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar nullableFacility = {\n\t\tsuffixes: [\"?\"],\n\n\t\tbeforeResolve: function(container, key, reg) {\n\t\t\tif (reg) return {\n\t\t\t\t// We don't want to handle non-null instances\n\t\t\t\thandled: false\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {\n\t\t\t\t\thandled: true,\n\t\t\t\t\tdata: null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar factoryInstance = function(container, key) {\n\t\tthis.container = container.create();\n\t\tthis.key = key;\n\t\t\n\t\texportProperty(this, \"dispose\", this.dispose);\n\t\texportProperty(this, \"get\", this.get);\n\t\texportProperty(this, \"use\", this.use);\n\t};\n\n\tfactoryInstance.prototype = {\n\t\tget: function() {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\targs.unshift(this.key);\n\n\t\t\tvar instance = this.container.get.apply(this.container, args);\n\t\t\tinstance.$containerFactoryInstance = this;\n\t\t\treturn instance;\n\t\t},\n\n\t\tuse: function(key, value, lifecycle) {\n\t\t\tthis.container.register(key, value, lifecycle);\n\t\t\treturn this;\n\t\t},\n\n\t\tdispose: function() {\n\t\t\tthis.container.dispose();\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar factory = function(container, key) {\n\t\tthis.container = container;\n\t\tthis.key = key;\n\t\t\n\t\texportProperty(this, \"dispose\", this.dispose);\n\t\texportProperty(this, \"get\", this.get);\n\t\texportProperty(this, \"use\", this.use);\n\t};\n\n\tfactory.prototype = {\n\t\tget: function() {\n\t\t\tvar fi = new factoryInstance(this.container, this.key);\n\t\t\treturn fi.get.apply(fi, arguments);\n\t\t},\n\n\t\tuse: function(key, value, lifecycle) {\n\t\t\tvar fi = new factoryInstance(this.container, this.key);\n\t\t\treturn fi.use(key, value, lifecycle);\n\t\t},\n\n\t\tdispose: function(obj) {\n\t\t\tobj.$containerFactoryInstance.dispose();\n\t\t\tdelete obj.$containerFactoryInstance;\n\t\t}\n\t};\n\n\tvar factoryFacility = {\n\t\tsuffixes: [\"Factory\", \"!\"],\n\n\t\tresolve: function(container, key, reg) {\n\t\t\tvar _this = this;\n\t\t\treturn {\n\t\t\t\thandled: true,\n\t\t\t\tdata: new factory(container, key)\n\t\t\t}\n\t\t}\n\t};\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar container = function(options, parent) {\n\t\tthis.registry = {};\n\t\tthis.parent = parent;\n\t\tthis.lifecycles = {\n\t\t\t\"perRequest\": new perRequestLifecycle(this),\n\t\t\t\"singleton\": new singletonLifecycle(this, parent ? parent.lifecycles[\"singleton\"] : null),\n\t\t\t\"unique\": new uniqueLifecycle(this)\n\t\t};\n\t\tthis.children = [];\n\n\t\toptions = options || {};\n\t\tthis.options = options;\n\n\t\tthis.register(\"container\", this);\n\n\t\texportProperty(this, \"dispose\", this.dispose);\n\t\texportProperty(this, \"get\", this.get);\n\t\texportProperty(this, \"register\", this.register);\n\t};\n\n\tvar getFacility = function(container, key) {\n\t\tfor (var facilityName in container.facilities) {\n\t\t\tvar facility = container.facilities[facilityName];\n\t\t\tfor (var t=0,len = facility.suffixes.length;t<len;t++) {\n\t\t\t\tvar suffix = facility.suffixes[t];\n\t\t\t\tif (key.indexOf(suffix, key.length - suffix.length) !== -1) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: facility,\n\t\t\t\t\t\tkey: key.slice(0, key.length - suffix.length)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdata: null,\n\t\t\tkey: key\n\t\t};\n\t};\n\n\tvar get = function(container, key, extraInjections) {\n\t\tvar facility = getFacility(container, key);\n\t\tkey = facility.key;\n\t\tfacility = facility.data;\n\n\t\t// Try to find the dependency registration in the current container.\n\t\t// If not found, recursively try the parent container.\n\t\tvar reg;\n\t\tvar currentContainer = container;\n\t\twhile (currentContainer) {\n\t\t\treg = currentContainer.registry[key];\n\t\t\tif (!reg) currentContainer = currentContainer.parent;\n\t\t\telse break;\n\t\t}\n\n\t\tif (facility && facility.beforeResolve) {\n\t\t\tvar result = facility.beforeResolve(container, key, reg);\n\t\t\tif (result.handled) return result.data;\n\t\t}\n\n\t\tif (!currentContainer) {\n\t\t\tthrow new Error(\"Unknown dependency: \" + key);\n\t\t}\n\n\t\tif (facility && facility.resolve) {\n\t\t\tvar result = facility.resolve(container, key, reg);\n\t\t\tif (result.handled) return result.data;\n\t\t}\n\n\t\t// Ask the lifecycle if it already has an instance of this dependency\n\t\tvar instance;\n\t\tif (instance = container.lifecycles[reg.lifecycle].get(key)) {\n\t\t\treturn instance;\n\t\t}\n\n\t\tvar returnValue;\n\n\t\t// Lifecycle didn't have an instance, so we need to create it.\n\t\t// If the registered value is a function we use it as a constructor.\n\t\t// Otherwise, we simply return the registered value.\n\t\tif (reg.value instanceof Function) {\n\t\t\t// The registered value is a constructor, so we need to construct the object and inject all the dependencies.\n\t\t\tvar injections = reg.value[\"$inject\"];\n\t\t\tvar resolvedInjections = [];\n\t\t\tif (injections instanceof Array) {\n\t\t\t\tfor (var t=0,len = injections.length;t<len;t++) {\n\t\t\t\t\tvar injectionKey = injections[t];\n\t\t\t\t\tresolvedInjections.push(get(container, injectionKey, []));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar InjectedInstance = function() {};\n\t\t\tInjectedInstance.prototype = reg.value.prototype;\n\t\t\tinstance = new InjectedInstance;\n\n\t\t\tfor (t=0,len = extraInjections.length;t<len;t++) {\n\t\t\t\tresolvedInjections.push(extraInjections[t]);\n\t\t\t}\n\n\t\t\t// If the callback returns a function, we consider it to be a custom factory.\n\t\t\t// This factory is then registered under the same key in the child container.\n\t\t\treturnValue = reg.value.apply(instance, resolvedInjections);\n\t\t\tif (returnValue instanceof Function) {\n\t\t\t\tinstance = new factoryInstance(container, key);\n\t\t\t\tinstance.container.register(key, returnValue);\n\n\t\t\t\t// Copy any static properties owned by the factory\n\t\t\t\tfor (var propertyName in returnValue) {\n\t\t\t\t\tif (returnValue.hasOwnProperty(propertyName)) instance[propertyName] = returnValue[propertyName];\n\t\t\t\t}\n\n\t\t\t\treturnValue = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\t// The registered value is an existing instance.\n\t\t\tinstance = reg.value;\n\t\t}\n\n\t\tcontainer.lifecycles[reg.lifecycle].set(new cacheItem(reg, instance));\n\n\t\t// If the returnValue is set, we should return that instead of the instance.\n\t\treturn returnValue || instance;\n\t};\n\n\tcontainer.prototype = {\n\t\tfacilities: {\n\t\t\tnullable: nullableFacility,\n\t\t\tfactory: factoryFacility\n\t\t},\n\n\t\tregister: function(key, value, lifecycle) {\n\t\t\t// Conflicts with facility names?\n\t\t\tif (getFacility(this, key).data) throw new Error(\"Cannot register dependency: \" + key);\n\n\t\t\tif (!lifecycle) {\n\t\t\t\t// update registration, if possible\n\t\t\t\tif (this.registry[key]) {\n\t\t\t\t\tthis.registry[key].value = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.registry[key] = new registration(key, this, value, lifecycle || \"perRequest\");\n\t\t},\n\n\t\tget: function(key) {\n\t\t\tfor (var lifecycleName in this.lifecycles) {\n\t\t\t\tif (this.lifecycles.hasOwnProperty(lifecycleName)) this.lifecycles[lifecycleName].resolveStarted(key);\n\t\t\t}\n\n\t\t\tvar extraInjections = Array.prototype.slice.call(arguments).slice(1);\n\n\t\t\tvar container = this;\n\t\t\tvar value;\n\t\t\twhile (container && (value = get(container, key, extraInjections)) === null) {\n\t\t\t\tcontainer = container.parent;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\n\t\tdispose: function() {\n\t\t\tvar item;\n\n\t\t\twhile (item = this.children.pop()) {\n\t\t\t\titem.dispose();\n\t\t\t}\n\n\t\t\tvar cache = this.getCachedObjects();\n\t\t\twhile (item = cache.pop()) {\n\t\t\t\tif (this.lifecycles[item.registration.lifecycle].release(item)) {\n\t\t\t\t\tif (this.options[\"onDispose\"]) {\n\t\t\t\t\t\tthis.options[\"onDispose\"](item.instance, item.registration.key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tcreate: function(options) {\n\t\t\toptions = options || {};\n\t\t\toptions[\"onDispose\"] = options[\"onDispose\"] || this.options[\"onDispose\"];\n\t\t\tvar child = new container(options, this);\n\t\t\tthis.children.push(child);\n\t\t\treturn child;\n\t\t},\n\n\t\tgetCachedObjects: function() {\n\t\t\tvar result = [];\n\t\t\tfor (var lifecycleName in this.lifecycles) {\n\t\t\t\tif (this.lifecycles.hasOwnProperty(lifecycleName)) result = result.concat(this.lifecycles[lifecycleName].cache);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tintravenous.create = function(options) {\n\t\treturn new container(options);\n\t};\n\n\texportSymbol(\"create\", intravenous.create);\n}());\n\n});\n})(typeof window !== \"undefined\" ? window : global);\n"}